buildscript {
    ext.kotlinVersion = '1.4.32'
    ext.kotlinCoroutinesVersion = '1.4.3'
    ext.kotlinSerializationVersion = '1.1.0'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        flatDir { dirs 'libs' }
        maven { url 'https://dl.bintray.com/enrevol/ee-x' }
        maven { url 'https://adcolony.bintray.com/AdColony' }
        maven { url 'https://dl.bintray.com/ironsource-mobile/android-adapters' }
        maven { url 'https://dl.bintray.com/ironsource-mobile/android-sdk' }
        mavenLocal()
    }
}

ext {
    compileSdkVersion = 30
    buildToolsVersion = '30.0.3'
    targetSdkVersion = 30
    firebaseVersion = '26.7.0'
    buildPrefab = true
    buildMaven = true
    pluginVersion = '2.7.0'
    pluginDependencies = [
        'core'                  : [],
        'ads'                   : ['core'],
        'ad-colony'             : ['ads'],
        'ad-mob'                : ['ads'],
        'ad-mob-mediation'      : ['ad-mob'],
        'app-lovin'             : ['ads'],
        'facebook-ads'          : ['ads'],
        'iron-source'           : ['ads'],
        'iron-source-mediation' : ['iron-source'],
        'unity-ads'             : ['ads'],
        'vungle'                : ['ads'],
        'adjust'                : ['core'],
        'apps-flyer'            : ['core'],
        'facebook'              : ['core'],
        'firebase-core'         : ['core'],
        'firebase-analytics'    : ['firebase-core'],
        'firebase-crashlytics'  : ['firebase-core'],
        // 'firebase-dynamic-link' : ['firebase-core'],
        // 'firebase-messaging'    : ['firebase-core'],
        'firebase-performance'  : ['firebase-core'],
        'firebase-remote-config': ['firebase-core'],
        // 'firebase-storage'      : ['firebase-core'],
        'notification'          : ['core'],
        'play'                  : ['core'],
        'recorder'              : ['core'],
        'soomla-store'          : ['store'],
        'store'                 : ['core'],
    ]
}

rootProject.ext.pluginDependencies.each { plugin, dependencies ->
    task "publish_plugin_$plugin" {
        group 'publishing helper'
        dependencies.each { dependency ->
            dependsOn "publish_plugin_$dependency"
        }
        dependsOn ":ee-x-$plugin:publishToMavenLocal"
    }
}

task "publish_all_plugins" {
    group 'publishing helper'
    rootProject.ext.pluginDependencies.each { plugin, _ ->
        dependsOn "publish_plugin_$plugin"
    }
}

def applyPrefabSettings(project, String libraryName, headerPaths) {
    /*
    Wait for AndroidStudio4.1
    
    def projectDir = project.projectDir
    project.android {
        ndkVersion '21.3.6528147'

        buildFeatures {
            prefabPublishing true
        }

        externalNativeBuild {
            cmake {
                path "$projectDir/CMakeLists.txt"
            }
        }

        prefab {
            "$libraryName" {
                headers "$projectDir/.generated_headers"
            }
        }
    }

    project.preBuild.dependsOn(tasks.create(name: "${libraryName}CopyHeaders") {
        doFirst {
            delete {
                delete "$projectDir/.generated_headers"
            }
            copy {
                from '../src'
                into "$projectDir/.generated_headers"
                headerPaths.each { item ->
                    include item
                }
            }
        }
    })
     */
}

def configureAndPublish(String libraryName) {
    project("ee-x-$libraryName") {
        def version = rootProject.ext.pluginVersion
        def plugins = rootProject.ext.pluginDependencies[libraryName]
        for (int i = 0; i < plugins.size(); ++i) {
            def plugin = plugins[i]
            dependencies {
                api "com.senspark.ee:$plugin:${version}"
            }
        }
        publishToMaven(libraryName, version)
    }
}

def publishToMaven(String libraryName, String libraryVersion) {
    project("ee-x-$libraryName") {
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'maven-publish'
        task androidSourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            archiveClassifier.set('sources')
        }
        afterEvaluate {
            publishing {
                publications {
                    create(libraryName, MavenPublication) {
                        from project.components.release
                        artifact androidSourcesJar
                        groupId = 'com.senspark.ee'
                        artifactId = libraryName
                        version = libraryVersion
                    }
                }
                repositories {
                    maven {
                        url "$buildDir/repo"
                    }
                }
            }
            bintray {
                user = "${BINTRAY_USER}"
                key = "${BINTRAY_API_KEY}"
                override = true
                publications = [libraryName]
                pkg {
                    repo = 'ee-x'
                    name = libraryName
                    licenses = ['MIT']
                    publish = true
                    vcsUrl = 'https://github.com/Senspark/ee-x.git'
                    version {
                        name = libraryVersion
                    }
                }
            }
        }
    }
}