buildscript {
    ext.kotlinVersion = '1.7.20'
    ext.kotlinCoroutinesVersion = '1.6.4'
    ext.kotlinSerializationVersion = '1.4.1'
    repositories {
        google()
        maven { url 'https://plugins.gradle.org/m2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://android-sdk.is.com' }
        maven { url 'https://sdk.tapjoy.com' }
        mavenLocal()
    }
}

ext {
    compileSdkVersion = 33
    buildToolsVersion = '33.0.1'
    targetSdkVersion = 33
    firebaseVersion = '29.3.1'
    buildPrefab = true
    buildMaven = true
    pluginVersion = '2.10.3'
}

def applyPrefabSettings(project, String libraryName, headerPaths) {
    /*
    Wait for AndroidStudio4.1
    
    def projectDir = project.projectDir
    project.android {
        ndkVersion '21.3.6528147'

        buildFeatures {
            prefabPublishing true
        }

        externalNativeBuild {
            cmake {
                path "$projectDir/CMakeLists.txt"
            }
        }

        prefab {
            "$libraryName" {
                headers "$projectDir/.generated_headers"
            }
        }
    }

    project.preBuild.dependsOn(tasks.create(name: "${libraryName}CopyHeaders") {
        doFirst {
            delete {
                delete "$projectDir/.generated_headers"
            }
            copy {
                from '../src'
                into "$projectDir/.generated_headers"
                headerPaths.each { item ->
                    include item
                }
            }
        }
    })
     */
}

def configureMaven(String libraryName) {
    project("ee-x-$libraryName") {
        apply plugin: 'signing'
        apply plugin: 'maven-publish'
        task androidSourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from android.sourceSets.main.java.srcDirs
        }
        android {
            publishing {
                singleVariant("release") {
                    withSourcesJar()
                }
            }
        }
        afterEvaluate {
            publishing {
                publications {
                    create(libraryName, MavenPublication) {
                        groupId = 'com.senspark.ee'
                        artifactId = libraryName
                        version = rootProject.ext.pluginVersion
                        artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                        artifact androidSourcesJar
                        pom {
                            name = libraryName
                            description = 'Cross-platform library for Cocos2d-x and Unity'
                            url = 'https://github.com/senspark/ee-x'
                            licenses {
                                license {
                                    name = 'MIT License'
                                    url = 'https://github.com/senspark/ee-x/blob/master/LICENSE'
                                }
                            }
                            developers {
                                developer {
                                    id = 'enrevol'
                                    name = 'Hai Hoang'
                                    email = 'enrevol@gmail.com'
                                }
                            }
                            scm {
                                connection = 'scm:git:github.com/senspark/ee-x.git'
                                developerConnection = 'scm:git:ssh://github.com/senspark/ee-x.git'
                                url = 'https://github.com/senspark/ee-x'
                            }
                            withXml {
                                def dependenciesNode = asNode().appendNode('dependencies')
                                project.configurations.implementation.allDependencies.each {
                                    def node = dependenciesNode.appendNode('dependency')
                                    if (it.version == 'unspecified') {
                                        node.appendNode('groupId', 'com.senspark.ee')
                                        node.appendNode('artifactId', it.name.substring('ee-x-'.length()))
                                        node.appendNode('version', rootProject.ext.pluginVersion)
                                    } else {
                                        node.appendNode('groupId', it.group)
                                        node.appendNode('artifactId', it.name)
                                        node.appendNode('version', it.version)
                                    }
                                }
                            }
                        }
                    }
                }
                repositories {
                    maven {
                        name = 'sonatype'
                        url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                        credentials {
                            username ossrhUsername
                            password ossrhPassword
                        }
                    }
                }
            }
        }
        // Use local build.
        // signing {
        //     sign publishing.publications
        // }
    }
}