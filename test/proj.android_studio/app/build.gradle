apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'

/// Used to switch between ndkBuild and cmake.
def USE_CMAKE = false

def CPP_FLAGS = [
    '-DCC_USE_PHYSICS=0',
    '-DCC_USE_3D_PHYSICS=0',
    '-DCC_ENABLE_BULLET_INTEGRATION=0',
    '-DCC_ENABLE_BOX2D_INTEGRATION=0',
    '-DCC_ENABLE_CHIPMUNK_INTEGRATION=0',
    '-std=c++2a',
    '-U__SSE__',
    '-frtti',
    '-fexceptions',
    '-fsigned-char',
    '-fcoroutines-ts',
    '-Wall',
    '-Wextra',

    // Disable some unnecessary warnings.
    '-Wno-unused-parameter',
]

/// Modify this variable to build the desired architectures.
String[] ARCHITECTURES = [
    'armeabi-v7a',
    // 'arm64-v8a'
]

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion '21.1.6352462'

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true

            externalNativeBuild {
                cmake {
                    cppFlags '-DCOCOS2D_DEBUG=1'
                }
                ndkBuild {
                    cppFlags '-DCOCOS2D_DEBUG=1'
                }
            }
        }
        release {
            minifyEnabled false
            debuggable false
            jniDebuggable false

            externalNativeBuild {
                cmake {
                    cppFlags '-DNDEBUG'
                }
                ndkBuild {
                    cppFlags '-DNDEBUG'
                }
            }

            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'com.ee.test.android'
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0.0'

        multiDexEnabled true

        externalNativeBuild {
            cmake {
                targets 'ee_x_test'
                arguments '-DANDROID_STL=c++_static'
                arguments '-DANDROID_TOOLCHAIN=clang'
                arguments '-DBUILD_EDITOR_COCOSBUILDER=OFF'
                arguments '-DBUILD_EDITOR_COCOSTUDIO=OFF'
                arguments '-DBUILD_EDITOR_SPINE=OFF'
                arguments '-DBUILD_EXTENSIONS=OFF'
                cppFlags += CPP_FLAGS
                abiFilters ARCHITECTURES
            }
            ndkBuild {
                targets 'ee_x_test'
                arguments 'APP_STL=c++_static'
                arguments 'NDK_TOOLCHAIN_VERSION=clang'
                arguments 'APP_LDFLAGS=-latomic'
                arguments '-j' + Runtime.runtime.availableProcessors()
                cppFlags += CPP_FLAGS
                abiFilters ARCHITECTURES
            }
        }
    }

    externalNativeBuild {
        if (USE_CMAKE) {
            cmake {
                path 'src/main/jni/CMakeLists.txt'
            }
        } else {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/x86/libcrashlytics.so'
        exclude 'lib/x86_64/libcrashlytics.so'
    }

    sourceSets {
        main {
            assets.srcDir '../../Resources'
            jni.srcDirs = []
        }
    }
}

/// Force version be 1 to avoid multiple version codes in Firebase console.
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if (variant.buildType.isDebuggable()) {
            output.versionCodeOverride = 1
        }
    }
}

/// Automatically run uploadCrashlyticsSymbolFile tasks.
tasks.whenTaskAdded { task ->
    ['assemble', 'bundle'].each { prefix ->
        if (task.name.startsWith(prefix) &&
            task.name.endsWith('Release')) {
            def variant = task.name.substring(prefix.length())
            task.finalizedBy "uploadCrashlyticsSymbolFile${variant}"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':libcocos2dx')
    implementation project(':ee-x-admob')
    implementation project(':ee-x-app-lovin')
    implementation project(':ee-x-apps-flyer')
    implementation project(':ee-x-campaign-receiver')
    implementation project(':ee-x-facebook')
    implementation project(':ee-x-facebook-ads')
    implementation project(':ee-x-firebase-analytics')
    implementation project(':ee-x-firebase-crashlytics')
    implementation project(':ee-x-firebase-dynamic-link')
    implementation project(':ee-x-firebase-messaging')
    implementation project(':ee-x-firebase-performance')
    implementation project(':ee-x-firebase-remote-config')
    implementation project(':ee-x-firebase-storage')
    implementation project(':ee-x-google-analytics')
    implementation project(':ee-x-iron-source')
    implementation project(':ee-x-notification')
    implementation project(':ee-x-play')
    implementation project(':ee-x-recorder')
    implementation project(':ee-x-soomla-store')
    implementation project(':ee-x-tenjin')
    implementation project(':ee-x-unity-ads')
    implementation project(':ee-x-vungle')

    implementation 'androidx.multidex:multidex:2.0.1'
}
